package com.limosys.dblib.vladtest.da;

import com.borland.dx.sql.dataset.Database;
import com.borland.dx.dataset.StorageDataSet;
import java.util.Hashtable;
import com.borland.dx.sql.dataset.ProcedureDataSet;
import com.borland.dx.sql.dataset.QueryDataSet;
import com.borland.dx.dataset.Column;
import com.borland.dx.dataset.DataSetException;
import com.borland.dx.sql.dataset.ResolutionException;
import com.borland.dx.dataset.Variant;
import com.borland.dx.dataset.CalcFieldsListener;
import java.util.TooManyListenersException;
import java.math.BigDecimal;
import java.sql.Time;
import java.util.Date;
import java.sql.Timestamp;
import java.util.GregorianCalendar;
import com.limosys.jlimoobject.JLimoObject;
import com.limosys.dblib.jlimoobject.utils.ObjectUtils;
import com.limosys.jlimoobject.ValidateResult;
import com.limosys.jlimoobject.SaveException;
import com.borland.dx.dataset.*;
import java.math.MathContext;
import com.limosys.dbaccess.DbAccessListener;
import com.limosys.jlimoobject.JLimoObjectProperty;
import com.limosys.jlimoobject.JLimoObjectSearchProperty;
import com.limosys.dbaccess.vladtest.VladDogAccess;
import com.limosys.dbaccess.vladtest.VladDogAccessList;

/**
 * <B>WARNING:</B> Class generated by JLimoObjectDesigner.  Do not make any changes, as they will be lost next time the
 * file is regenerated.  Any custom logic should be included in descending classes.
 *
 */
public abstract class VladDogDataAccess extends JLimoObject {

  public enum VladDogAccessType {
    NONE,
    ONEREC,
    LIST
  }

  public enum VladDogDataSetId {
    ONEREC_DEFAULT (VladDogAccessType.ONEREC),
    LIST_DEFAULT (VladDogAccessType.LIST);

    private VladDogAccessType accessType;
    private VladDogDataSetId(VladDogAccessType accessType) {
      this.accessType = accessType;
    }
    public VladDogAccessType getAccessType() {
      return this.accessType;
    }
  }

  public abstract void synchronizeWithMainDataSet();
  protected abstract void addCalculatedColumns();
  protected abstract boolean allowAccessTypeChange(VladDogAccessType accessType);


  private void initProps() {
    try {
      htObjProps.put("Name", new JLimoObjectProperty("Name", this.getClass().getMethod("colName"), Variant.STRING));
      htObjProps.put("Id", new JLimoObjectProperty("Id", this.getClass().getMethod("colId"), Variant.INT));
      htObjProps.put("FriendId", new JLimoObjectProperty("FriendId", this.getClass().getMethod("colFriendId"), Variant.INT));
      htObjProps.put("DateTimeOfDeath", new JLimoObjectProperty("DateTimeOfDeath", this.getClass().getMethod("colDateTimeOfDeath"), Variant.TIMESTAMP));
      htObjProps.put("AmountOfLegs", new JLimoObjectProperty("AmountOfLegs", this.getClass().getMethod("colAmountOfLegs"), Variant.SHORT));
      htObjProps.put("DateOfBirth", new JLimoObjectProperty("DateOfBirth", this.getClass().getMethod("colDateOfBirth"), Variant.TIMESTAMP));
    } catch (SecurityException ex) {
    } catch (NoSuchMethodException ex) {
    }
  }

protected void changesLog_Prepare() {}

protected void changesLog_Save() {}

public void transaction_BeforeSave() throws SaveException {
  ValidateResult vr = validate();
  if (!vr.isValid()) throw new SaveException(vr);
  changesLog_Prepare();
}

public void transaction_AfterSave() {
  changesLog_Save();
}


private void initSearchProps() {
  try {
    htObjSearchProps = new Hashtable<String, JLimoObjectSearchProperty>();
  } catch (SecurityException ex) {
  }
}


// *** Constructors: ***
public VladDogDataAccess() {
  initProps();
  initSearchProps();
}
public VladDogDataAccess(VladDogAccessType accessType, boolean useDefaultInstance) {
  initProps();
  initSearchProps();
  setAccessType(accessType, useDefaultInstance);
}
public VladDogDataAccess(VladDogAccessType accessType, Database db) {
  initProps();
  initSearchProps();
  setAccessType(accessType, db);
}
public VladDogDataAccess(VladDogAccessType accessType, StorageDataSet[] dsArr) {
  initProps();
  initSearchProps();
  setAccessType(accessType, dsArr);
}

protected ReadWriteRow rwRow;
protected VladDogDataAccess(VladDogAccessType accessType, ReadWriteRow rwRow) {
  if (accessType == VladDogAccessType.NONE && rwRow == null)
    throw new DataSetException("Can't use this constructor with VladDogAccessType.NONE or null rwRow.");
  this.rwRow = rwRow;
  switch (accessType) {
    case ONEREC:
      curAccessType = VladDogAccessType.ONEREC;
      break;
    case LIST:
      curAccessType = VladDogAccessType.LIST;
      break;
    default:
      curAccessType = VladDogAccessType.NONE;
  }
}


// *** setAccessType Methods: ***
private VladDogAccessType curAccessType = VladDogAccessType.NONE;
public VladDogAccessType getAccessType() {
    return curAccessType;
}

protected StorageDataSet[] curDataSets;
private void setCurrentDataSets() {
  VladDogDataSetId[] dsIds = getDataSetIds(curAccessType);
  curDataSets = new StorageDataSet[dsIds.length];
  for (int i=0; i<dsIds.length; i++) {
        curDataSets[i] = getDataSet(dsIds[i]);
  }
  addCalculatedColumns();
  updatePropertiesAndEvents();
}

protected void setAccessType(VladDogAccessType accessType, boolean useDefaultInstance) {
  setAccessType(accessType, useDefaultInstance, null);
}
protected void setAccessType(VladDogAccessType accessType, boolean useDefaultInstance, DbAccessListener dbAccessListener) {
  if (!allowAccessTypeChange(accessType)) {
    throw new DataSetException("Can't change Access Type to " + accessType.toString());
  }
  htDataSets.clear();
  switch (accessType) {
  case ONEREC:
    VladDogAccess aVladDogAccess0 = (useDefaultInstance ? VladDogAccess.getInstance() : new VladDogAccess());
    if (dbAccessListener!=null) {
      aVladDogAccess0.addDbAccessListener(dbAccessListener);
    }
    htDataSets.put(VladDogDataSetId.ONEREC_DEFAULT, aVladDogAccess0.getViewDataSet());
    curAccessType = VladDogAccessType.ONEREC;
    break;
  case LIST:
    VladDogAccessList aVladDogAccessList1 = (useDefaultInstance ? VladDogAccessList.getInstance() : new VladDogAccessList());
    if (dbAccessListener!=null) {
      aVladDogAccessList1.addDbAccessListener(dbAccessListener);
    }
    htDataSets.put(VladDogDataSetId.LIST_DEFAULT, aVladDogAccessList1.getViewDataSet());
    curAccessType = VladDogAccessType.LIST;
    break;
  default:
      curAccessType = VladDogAccessType.NONE;
  }
  setCurrentDataSets();
}

protected void setAccessType(VladDogAccessType accessType, Database db) {
  setAccessType(accessType, db, null);
}

protected void setAccessType(VladDogAccessType accessType, Database db, DbAccessListener dbAccessListener) {
  if (!allowAccessTypeChange(accessType)) {
    throw new DataSetException("Can't change Access Type to " + accessType.toString());
  }
  htDataSets.clear();
  switch (accessType) {
    case ONEREC:
      VladDogAccess accsCls0_0 = new VladDogAccess(db);
      if (dbAccessListener!=null) {
        accsCls0_0.addDbAccessListener(dbAccessListener);
      }
      htDataSets.put(VladDogDataSetId.ONEREC_DEFAULT, accsCls0_0.getViewDataSet());
      curAccessType = VladDogAccessType.ONEREC;
      break;
    case LIST:
      VladDogAccessList accsCls1_0 = new VladDogAccessList(db);
      if (dbAccessListener!=null) {
        accsCls1_0.addDbAccessListener(dbAccessListener);
      }
      htDataSets.put(VladDogDataSetId.LIST_DEFAULT, accsCls1_0.getViewDataSet());
      curAccessType = VladDogAccessType.LIST;
      break;
    default:
      curAccessType = VladDogAccessType.NONE;
  }
  setCurrentDataSets();
}

protected boolean setAccessType(VladDogAccessType accessType, StorageDataSet[] dsArr) {
  if (!allowAccessTypeChange(accessType)) {
    throw new DataSetException("Can't change Access Type to " + accessType.toString());
  }
  htDataSets.clear();
  VladDogDataSetId[] dsIds = getDataSetIds(accessType);
  if (dsArr==null || dsArr.length != dsIds.length) {
      curAccessType = VladDogAccessType.NONE;
      setCurrentDataSets();
      return false;
  }

  switch (accessType) {
  case ONEREC:
    htDataSets.put(VladDogDataSetId.ONEREC_DEFAULT, dsArr[0]);
    curAccessType = VladDogAccessType.ONEREC;
    break;
  case LIST:
    htDataSets.put(VladDogDataSetId.LIST_DEFAULT, dsArr[0]);
    curAccessType = VladDogAccessType.LIST;
    break;
  default:
      curAccessType = VladDogAccessType.NONE;
  }
  setCurrentDataSets();
  return true;
}


// *** Design Support Methods: ***
private StorageDataSet sdsNone = new StorageDataSet();
protected StorageDataSet getSdsNone() {
  return sdsNone;
}
protected Column[] getDesignColumns() {
  return sdsNone.getColumns();
}
protected Column[] getDesignColumns(VladDogDataSetId dsId) {
  if (dsId.accessType!=curAccessType) return new Column[0];
  return getDataSet(dsId).getColumns();
}


// *** DataSet Methods: ***
public VladDogDataSetId[] getDataSetIds(VladDogAccessType accessType) {
  int size = 0;
  for (VladDogDataSetId dsId : VladDogDataSetId.values()) {
    if (dsId.getAccessType()==accessType) size++;
  }
  VladDogDataSetId[] dsIdArr = new VladDogDataSetId[size];
  int i = 0;
  for (VladDogDataSetId dsId : VladDogDataSetId.values()) {
    if (dsId.getAccessType()==accessType) dsIdArr[i++] = dsId;
  }
  return dsIdArr;
}

public StorageDataSet getDataSetMain() {
  if (curDataSets==null || curDataSets.length==0) {
    return null;
  } else {
    return curDataSets[0];
  }
}

public ReadWriteRow getReadWriteRow() {
  if (rwRow!=null) return rwRow;
  if (curAccessType==VladDogAccessType.NONE) return null;
  StorageDataSet sds = getDataSetMain();
  if (getDataSetMain()==null || sds.rowCount()==0) return null;
  DataRow dr = new DataRow(sds);
  sds.getDataRow(dr);
  return dr;
}

private java.util.Hashtable<VladDogDataSetId, StorageDataSet> htDataSets = new Hashtable<VladDogDataSetId,StorageDataSet>();
public StorageDataSet getDataSet(VladDogDataSetId dataSetId) {
  if (dataSetId.getAccessType()!=curAccessType) return null;
      return htDataSets.get(dataSetId);
}
protected void setDataSet(VladDogDataSetId dataSetId, StorageDataSet dataSet) {
  htDataSets.put(dataSetId, dataSet);
}
protected void clearDataSet(VladDogDataSetId dataSetId) {
  htDataSets.remove(dataSetId);
}

public void addNew() {
  if (!curDataSets[0].isOpen()) curDataSets[0].open();
  curDataSets[0].insertRow(false);
}

protected abstract ValidateResult validateRow(ReadWriteRow origRow);

public ValidateResult validate() {
  Post();
  int curRowNo = curDataSets[0].getRow();
  ValidateResult vr;
  DataSetView dsvUpdated = getDsvUpdated(curDataSets[0]);
  dsvUpdated.first();
  for (int i=0; i<dsvUpdated.getRowCount(); i++) {
    DataRow origRow = new DataRow(curDataSets[0]);
    curDataSets[0].getOriginalRow(dsvUpdated, origRow);
    curDataSets[0].goToRow(dsvUpdated);
    vr = validateRow(origRow);
    if (vr!=null && !vr.isValid()) {
      curDataSets[0].goToRow(dsvUpdated);
      dsvUpdated.close();
      return vr;
    }
    dsvUpdated.next();
  }
  dsvUpdated.close();
  DataSetView dsvInserted = getDsvInserted(curDataSets[0]);
  dsvInserted.first();
  for (int i=0; i<dsvInserted.getRowCount(); i++) {
    curDataSets[0].goToRow(dsvInserted);
    vr = validateRow(null);
    if (vr!=null && !vr.isValid() ) {
      curDataSets[0].goToRow(dsvInserted);
      dsvInserted.close();
      return vr;
    }
    dsvInserted.next();
  }
  dsvInserted.close();
  curDataSets[0].goToRow(curRowNo);
  return new ValidateResult();
}

public void saveChanges() throws SaveException {
  ValidateResult vr;
  if (curDataSets.length==0) return;
  if (curDataSets.length==1) {
    vr = validate();
    if( !vr.isValid() ) throw new SaveException(vr);
    try {
      changesLog_Prepare();
      curDataSets[0].saveChanges();
      changesLog_Save();
    } catch (ResolutionException ex) {
      throw new SaveException(ex.fillInStackTrace().toString(), ex.getDataSet());
    } catch (Exception ex) {
      throw new SaveException(ex.fillInStackTrace().toString());
    }
    return;
  }

  Database db = null;
  for (int i=0; i<curDataSets.length; i++) {
    Database curDb = null;
    if (curDataSets[i] instanceof ProcedureDataSet) {
      curDb = ((ProcedureDataSet)curDataSets[i]).getDatabase();
    } else if (curDataSets[i] instanceof QueryDataSet) {
      curDb = ((QueryDataSet)curDataSets[i]).getDatabase();
    }

    if (curDb==null) {
      db = null;
      break;
    } else if (db==null) {
      db = curDb;
    } else if (curDb!=db) {
      db = null;
      break;
    }
  }

  try {
    changesLog_Prepare();
    vr = validate();
    if (!vr.isValid())
      throw new SaveException(vr);
    if (db == null) {
      for (int i = 0; i < curDataSets.length; i++) {
        curDataSets[i].saveChanges();
      }
    } else {
      db.saveChanges(curDataSets);
    }
    changesLog_Save();
  } catch (ResolutionException ex) {
    throw new SaveException(ex.fillInStackTrace().toString(), ex.getDataSet());
  } catch (Exception ex) {
    throw new SaveException(ex.fillInStackTrace().toString());
  }
}

public void RefreshDataSets() {
  if (curDataSets.length==0) return;
  for (int i=0; i<curDataSets.length; i++) {
      curDataSets[i].refresh();
  }
}

public void Post() {
  if (curDataSets.length==0) return;
  for (int i=0; i<curDataSets.length; i++) {
      curDataSets[i].post();
  }
}

public boolean isEmptyDataSet() {
  if (curDataSets.length==0) return true;
  if (!curDataSets[0].isOpen()) curDataSets[0].open();
  return curDataSets[0].isEmpty();
}

// *** Private Helper Methods: ***
protected DataSetException getPropertyNotAvailableException(String propName) {
  return new DataSetException(DataSetException.COLUMN_NOT_IN_ROW,
                              "Property " + propName + " not available in VladDogAccessType." + curAccessType);
}

protected void updatePropertiesAndEvents() {
  if (sdsNone==null) return;
  if (curDataSets==null) return;
  CalcFieldsListener calcFldsLstnr = sdsNone.getCalcFieldsListener();
  for (int i=0; i<curDataSets.length; i++) {
    StorageDataSet sds = curDataSets[i];
      for(Column col : sds.getColumns() ) {
        if (col.getCalcType() == CalcType.CALC) {
          if (calcFldsLstnr != null) {
            try {
              sds.addCalcFieldsListener(calcFldsLstnr);
              break;
            } catch (TooManyListenersException ex) {}
          }
        }
      }
    }
    for (int j=0; j<sdsNone.getColumns().length; j++) {
      Column colNone = sdsNone.getColumn(j);
      Column col = getColumnByProperty(colNone.getColumnName());
      if (col!=null) {
        col.setCaption(colNone.getCaption());
      }
    }
  }

// Name:
  public boolean isNameNull() {
    switch (curAccessType) {
    case ONEREC:
      return rwRow==null ? curDataSets[0].isNull("NAME") : rwRow.isNull("NAME");
    case LIST:
      return rwRow==null ? curDataSets[0].isNull("NAME") : rwRow.isNull("NAME");
    default:
      throw getPropertyNotAvailableException("Name");
    }
  }
  public void setNameNull() {
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("NAME");
      } else {
        rwRow.setAssignedNull("NAME");
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("NAME");
      } else {
        rwRow.setAssignedNull("NAME");
      }
      break;
    default:
      throw getPropertyNotAvailableException("Name");
    }
  }
  public String getName() {/// ## 1
    if (isNameNull()) return null;
    switch (curAccessType) {
    case ONEREC:
      return rwRow==null ? curDataSets[0].getString("NAME") : rwRow.getString("NAME");
    case LIST:
      return rwRow==null ? curDataSets[0].getString("NAME") : rwRow.getString("NAME");
    default:
      throw getPropertyNotAvailableException("Name");
    }
  }
  public void setName(String name) {/// ## 2
    if (name==null) {
      setNameNull();
      return;
    }
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setString("NAME", name);
      } else {
        rwRow.setString("NAME", name);
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setString("NAME", name);
      } else {
        rwRow.setString("NAME", name);
      }
      break;
    default:
      throw getPropertyNotAvailableException("Name");
    }
  }
  public Column colName() {
    switch (curAccessType) {
    case ONEREC:
      return (rwRow==null ? curDataSets[0].getColumn("NAME") : rwRow.getColumn("NAME"));
    case LIST:
      return (rwRow==null ? curDataSets[0].getColumn("NAME") : rwRow.getColumn("NAME"));
    case NONE:
      if (sdsNone.hasColumn("Name")==null) {
        Column col = new Column();
        col.setCaption("Name");
        col.setColumnName("Name");
        col.setDataType(com.borland.dx.dataset.Variant.STRING);
        sdsNone.addColumn(col);
      }
      return sdsNone.getColumn("Name");
    default:
      return null;
    }
  }

// Id:
  public boolean isIdNull() {
    switch (curAccessType) {
    case ONEREC:
      return rwRow==null ? curDataSets[0].isNull("ID") : rwRow.isNull("ID");
    case LIST:
      return rwRow==null ? curDataSets[0].isNull("ID") : rwRow.isNull("ID");
    default:
      throw getPropertyNotAvailableException("Id");
    }
  }
  public void setIdNull() {
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("ID");
      } else {
        rwRow.setAssignedNull("ID");
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("ID");
      } else {
        rwRow.setAssignedNull("ID");
      }
      break;
    default:
      throw getPropertyNotAvailableException("Id");
    }
  }
  public int getId() {/// ## 1
    if(isIdNull()) throw new DataSetException("Property value equals null!!!");
    switch (curAccessType) {
    case ONEREC:
      return rwRow==null ? curDataSets[0].getInt("ID") : rwRow.getInt("ID");
    case LIST:
      return rwRow==null ? curDataSets[0].getInt("ID") : rwRow.getInt("ID");
    default:
      throw getPropertyNotAvailableException("Id");
    }
  }
  public void setId(int id) {/// ## 2
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setInt("ID", id);
      } else {
        rwRow.setInt("ID", id);
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setInt("ID", id);
      } else {
        rwRow.setInt("ID", id);
      }
      break;
    default:
      throw getPropertyNotAvailableException("Id");
    }
  }
  public Column colId() {
    switch (curAccessType) {
    case ONEREC:
      return (rwRow==null ? curDataSets[0].getColumn("ID") : rwRow.getColumn("ID"));
    case LIST:
      return (rwRow==null ? curDataSets[0].getColumn("ID") : rwRow.getColumn("ID"));
    case NONE:
      if (sdsNone.hasColumn("Id")==null) {
        Column col = new Column();
        col.setCaption("Id");
        col.setColumnName("Id");
        col.setDataType(com.borland.dx.dataset.Variant.INT);
        sdsNone.addColumn(col);
      }
      return sdsNone.getColumn("Id");
    default:
      return null;
    }
  }

// FriendId:
  public boolean isFriendIdNull() {
    switch (curAccessType) {
    case ONEREC:
      return rwRow==null ? curDataSets[0].isNull("FRIEND_ID") : rwRow.isNull("FRIEND_ID");
    case LIST:
      return rwRow==null ? curDataSets[0].isNull("FRIEND_ID") : rwRow.isNull("FRIEND_ID");
    default:
      throw getPropertyNotAvailableException("FriendId");
    }
  }
  public void setFriendIdNull() {
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("FRIEND_ID");
      } else {
        rwRow.setAssignedNull("FRIEND_ID");
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("FRIEND_ID");
      } else {
        rwRow.setAssignedNull("FRIEND_ID");
      }
      break;
    default:
      throw getPropertyNotAvailableException("FriendId");
    }
  }
  public int getFriendId() {/// ## 1
    if(isFriendIdNull()) throw new DataSetException("Property value equals null!!!");
    switch (curAccessType) {
    case ONEREC:
      return rwRow==null ? curDataSets[0].getInt("FRIEND_ID") : rwRow.getInt("FRIEND_ID");
    case LIST:
      return rwRow==null ? curDataSets[0].getInt("FRIEND_ID") : rwRow.getInt("FRIEND_ID");
    default:
      throw getPropertyNotAvailableException("FriendId");
    }
  }
  public void setFriendId(int friendId) {/// ## 2
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setInt("FRIEND_ID", friendId);
      } else {
        rwRow.setInt("FRIEND_ID", friendId);
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setInt("FRIEND_ID", friendId);
      } else {
        rwRow.setInt("FRIEND_ID", friendId);
      }
      break;
    default:
      throw getPropertyNotAvailableException("FriendId");
    }
  }
  public Column colFriendId() {
    switch (curAccessType) {
    case ONEREC:
      return (rwRow==null ? curDataSets[0].getColumn("FRIEND_ID") : rwRow.getColumn("FRIEND_ID"));
    case LIST:
      return (rwRow==null ? curDataSets[0].getColumn("FRIEND_ID") : rwRow.getColumn("FRIEND_ID"));
    case NONE:
      if (sdsNone.hasColumn("FriendId")==null) {
        Column col = new Column();
        col.setCaption("FriendId");
        col.setColumnName("FriendId");
        col.setDataType(com.borland.dx.dataset.Variant.INT);
        sdsNone.addColumn(col);
      }
      return sdsNone.getColumn("FriendId");
    default:
      return null;
    }
  }

// DateTimeOfDeath:
  public boolean isDateTimeOfDeathNull() {
    switch (curAccessType) {
    case ONEREC:
      return rwRow==null ? curDataSets[0].isNull("DATE_TIME_OF_DEATH") : rwRow.isNull("DATE_TIME_OF_DEATH");
    case LIST:
      return rwRow==null ? curDataSets[0].isNull("DATE_TIME_OF_DEATH") : rwRow.isNull("DATE_TIME_OF_DEATH");
    default:
      throw getPropertyNotAvailableException("DateTimeOfDeath");
    }
  }
  public void setDateTimeOfDeathNull() {
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("DATE_TIME_OF_DEATH");
      } else {
        rwRow.setAssignedNull("DATE_TIME_OF_DEATH");
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("DATE_TIME_OF_DEATH");
      } else {
        rwRow.setAssignedNull("DATE_TIME_OF_DEATH");
      }
      break;
    default:
      throw getPropertyNotAvailableException("DateTimeOfDeath");
    }
  }
  public Date getDateTimeOfDeath() {/// ## 5
    if (isDateTimeOfDeathNull()) return null;
    switch (curAccessType) {
    case ONEREC:
      return new Date( rwRow==null ? curDataSets[0].getTimestamp("DATE_TIME_OF_DEATH").getTime() : rwRow.getTimestamp("DATE_TIME_OF_DEATH").getTime());
    case LIST:
      return new Date( rwRow==null ? curDataSets[0].getTimestamp("DATE_TIME_OF_DEATH").getTime() : rwRow.getTimestamp("DATE_TIME_OF_DEATH").getTime());
    default:
      throw getPropertyNotAvailableException("DateTimeOfDeath");
    }
  }
  public void setDateTimeOfDeath(Date dateTimeOfDeath) {/// ## 6
    if (dateTimeOfDeath==null) {
      setDateTimeOfDeathNull();
      return;
    }
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setTimestamp("DATE_TIME_OF_DEATH", new Timestamp(dateTimeOfDeath.getTime()));
      } else {
        rwRow.setTimestamp("DATE_TIME_OF_DEATH", new Timestamp(dateTimeOfDeath.getTime()));
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setTimestamp("DATE_TIME_OF_DEATH", new Timestamp(dateTimeOfDeath.getTime()));
      } else {
        rwRow.setTimestamp("DATE_TIME_OF_DEATH", new Timestamp(dateTimeOfDeath.getTime()));
      }
      break;
    default:
      throw getPropertyNotAvailableException("DateTimeOfDeath");
    }
  }
  public Column colDateTimeOfDeath() {
    switch (curAccessType) {
    case ONEREC:
      return (rwRow==null ? curDataSets[0].getColumn("DATE_TIME_OF_DEATH") : rwRow.getColumn("DATE_TIME_OF_DEATH"));
    case LIST:
      return (rwRow==null ? curDataSets[0].getColumn("DATE_TIME_OF_DEATH") : rwRow.getColumn("DATE_TIME_OF_DEATH"));
    case NONE:
      if (sdsNone.hasColumn("DateTimeOfDeath")==null) {
        Column col = new Column();
        col.setCaption("DateTimeOfDeath");
        col.setColumnName("DateTimeOfDeath");
        col.setDataType(com.borland.dx.dataset.Variant.TIMESTAMP);
        sdsNone.addColumn(col);
      }
      return sdsNone.getColumn("DateTimeOfDeath");
    default:
      return null;
    }
  }

// AmountOfLegs:
  public boolean isAmountOfLegsNull() {
    switch (curAccessType) {
    case ONEREC:
      return rwRow==null ? curDataSets[0].isNull("AMOUNT_OF_LEGS") : rwRow.isNull("AMOUNT_OF_LEGS");
    case LIST:
      return rwRow==null ? curDataSets[0].isNull("AMOUNT_OF_LEGS") : rwRow.isNull("AMOUNT_OF_LEGS");
    default:
      throw getPropertyNotAvailableException("AmountOfLegs");
    }
  }
  public void setAmountOfLegsNull() {
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("AMOUNT_OF_LEGS");
      } else {
        rwRow.setAssignedNull("AMOUNT_OF_LEGS");
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("AMOUNT_OF_LEGS");
      } else {
        rwRow.setAssignedNull("AMOUNT_OF_LEGS");
      }
      break;
    default:
      throw getPropertyNotAvailableException("AmountOfLegs");
    }
  }
  public short getAmountOfLegs() {/// ## 1
    if(isAmountOfLegsNull()) throw new DataSetException("Property value equals null!!!");
    switch (curAccessType) {
    case ONEREC:
      return rwRow==null ? curDataSets[0].getShort("AMOUNT_OF_LEGS") : rwRow.getShort("AMOUNT_OF_LEGS");
    case LIST:
      return rwRow==null ? curDataSets[0].getShort("AMOUNT_OF_LEGS") : rwRow.getShort("AMOUNT_OF_LEGS");
    default:
      throw getPropertyNotAvailableException("AmountOfLegs");
    }
  }
  public void setAmountOfLegs(short amountOfLegs) {/// ## 2
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setShort("AMOUNT_OF_LEGS", amountOfLegs);
      } else {
        rwRow.setShort("AMOUNT_OF_LEGS", amountOfLegs);
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setShort("AMOUNT_OF_LEGS", amountOfLegs);
      } else {
        rwRow.setShort("AMOUNT_OF_LEGS", amountOfLegs);
      }
      break;
    default:
      throw getPropertyNotAvailableException("AmountOfLegs");
    }
  }
  public Column colAmountOfLegs() {
    switch (curAccessType) {
    case ONEREC:
      return (rwRow==null ? curDataSets[0].getColumn("AMOUNT_OF_LEGS") : rwRow.getColumn("AMOUNT_OF_LEGS"));
    case LIST:
      return (rwRow==null ? curDataSets[0].getColumn("AMOUNT_OF_LEGS") : rwRow.getColumn("AMOUNT_OF_LEGS"));
    case NONE:
      if (sdsNone.hasColumn("AmountOfLegs")==null) {
        Column col = new Column();
        col.setCaption("AmountOfLegs");
        col.setColumnName("AmountOfLegs");
        col.setDataType(com.borland.dx.dataset.Variant.SHORT);
        sdsNone.addColumn(col);
      }
      return sdsNone.getColumn("AmountOfLegs");
    default:
      return null;
    }
  }

// DateOfBirth:
  public boolean isDateOfBirthNull() {
    switch (curAccessType) {
    case ONEREC:
      return rwRow==null ? curDataSets[0].isNull("DATE_OF_BIRTH") : rwRow.isNull("DATE_OF_BIRTH");
    case LIST:
      return rwRow==null ? curDataSets[0].isNull("DATE_OF_BIRTH") : rwRow.isNull("DATE_OF_BIRTH");
    default:
      throw getPropertyNotAvailableException("DateOfBirth");
    }
  }
  public void setDateOfBirthNull() {
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("DATE_OF_BIRTH");
      } else {
        rwRow.setAssignedNull("DATE_OF_BIRTH");
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setAssignedNull("DATE_OF_BIRTH");
      } else {
        rwRow.setAssignedNull("DATE_OF_BIRTH");
      }
      break;
    default:
      throw getPropertyNotAvailableException("DateOfBirth");
    }
  }
  public Date getDateOfBirth() {/// ## 5
    if (isDateOfBirthNull()) return null;
    switch (curAccessType) {
    case ONEREC:
      return new Date( rwRow==null ? curDataSets[0].getTimestamp("DATE_OF_BIRTH").getTime() : rwRow.getTimestamp("DATE_OF_BIRTH").getTime());
    case LIST:
      return new Date( rwRow==null ? curDataSets[0].getTimestamp("DATE_OF_BIRTH").getTime() : rwRow.getTimestamp("DATE_OF_BIRTH").getTime());
    default:
      throw getPropertyNotAvailableException("DateOfBirth");
    }
  }
  public void setDateOfBirth(Date dateOfBirth) {/// ## 6
    if (dateOfBirth==null) {
      setDateOfBirthNull();
      return;
    }
    switch (curAccessType) {
    case ONEREC:
      if (rwRow==null) {
        curDataSets[0].setTimestamp("DATE_OF_BIRTH", new Timestamp(dateOfBirth.getTime()));
      } else {
        rwRow.setTimestamp("DATE_OF_BIRTH", new Timestamp(dateOfBirth.getTime()));
      }
      break;
    case LIST:
      if (rwRow==null) {
        curDataSets[0].setTimestamp("DATE_OF_BIRTH", new Timestamp(dateOfBirth.getTime()));
      } else {
        rwRow.setTimestamp("DATE_OF_BIRTH", new Timestamp(dateOfBirth.getTime()));
      }
      break;
    default:
      throw getPropertyNotAvailableException("DateOfBirth");
    }
  }
  public Column colDateOfBirth() {
    switch (curAccessType) {
    case ONEREC:
      return (rwRow==null ? curDataSets[0].getColumn("DATE_OF_BIRTH") : rwRow.getColumn("DATE_OF_BIRTH"));
    case LIST:
      return (rwRow==null ? curDataSets[0].getColumn("DATE_OF_BIRTH") : rwRow.getColumn("DATE_OF_BIRTH"));
    case NONE:
      if (sdsNone.hasColumn("DateOfBirth")==null) {
        Column col = new Column();
        col.setCaption("DateOfBirth");
        col.setColumnName("DateOfBirth");
        col.setDataType(com.borland.dx.dataset.Variant.TIMESTAMP);
        sdsNone.addColumn(col);
      }
      return sdsNone.getColumn("DateOfBirth");
    default:
      return null;
    }
  }

  protected Column getColumnByProperty(String propName) {
    if (propName==null) {
        return null;
    } else if (propName.equals("Name")) {
      return colName();
    } else if (propName.equals("Id")) {
      return colId();
    } else if (propName.equals("FriendId")) {
      return colFriendId();
    } else if (propName.equals("DateTimeOfDeath")) {
      return colDateTimeOfDeath();
    } else if (propName.equals("AmountOfLegs")) {
      return colAmountOfLegs();
    } else if (propName.equals("DateOfBirth")) {
      return colDateOfBirth();
    } else {
      for (int i=0; i<curDataSets.length; i++) {
        Column col = curDataSets[i].hasColumn(propName);
        if (col!=null) return col;
      }
    }
    return null;
  }
//  import com.borland.dx.sql.dataset.Database;
//  import com.borland.dx.sql.dataset.ProcedureDataSet;
//  import com.borland.dx.dataset.StorageDataSet;
//  import com.borland.dx.dataset.ReadWriteRow;
//  import com.borland.dx.dataset.DataRow;
//  import com.borland.dx.dataset.DataSetException;
//  import com.borland.dx.dataset.Locate;
//  import java.util.Hashtable;
//  
//  private Database construct_db;
//  //protected VladDogChangeLog chngLog = super.getChangeLog();
//  private static VladDog dfltInstance_NONE = null; 
//  private static VladDog dfltInstance_ONEREC = null; 
//  private static VladDog dfltInstance_LIST = null; 
//  
//  private static Hashtable<Integer, VladDog> htLookup = new Hashtable<Integer,VladDog>();
//  public static VladDog getDfltVladDogLkup(Database db) {
//    VladDog lkupObj;
//    if (db==null) {
//      lkupObj = getDfltInstance(VladDogAccessType.LIST);
//      db = ((ProcedureDataSet)lkupObj.getDataSetMain()).getDatabase();
//      htLookup.put(db.hashCode(), lkupObj);
//    } else {
//      if (htLookup.containsKey(db.hashCode())) {
//        lkupObj = htLookup.get(db.hashCode());
//      } else {
//        lkupObj = new VladDog(VladDogAccessType.LIST, db);
//        htLookup.put(db.hashCode(), lkupObj);
//      }
//    }
//    if (!lkupObj.getDataSetMain().isOpen()) lkupObj.RefreshDataSets();
//    return lkupObj;
//  }
//  
//  public static VladDog getDfltInstance(VladDogAccessType accessType) {
//  switch (accessType) {
//    case ONEREC :
//      if(dfltInstance_ONEREC == null) dfltInstance_ONEREC = new VladDog(VladDogAccessType.ONEREC);
//      //if (!dfltInstance_ONEREC.getDataSetMain().isOpen()) dfltInstance_ONEREC.RefreshDataSets();
//      return dfltInstance_ONEREC;
//    case LIST :
//      if(dfltInstance_LIST == null) dfltInstance_LIST = new VladDog(VladDogAccessType.LIST);
//      //if (!dfltInstance_LIST.getDataSetMain().isOpen()) dfltInstance_LIST.RefreshDataSets();
//      return dfltInstance_LIST;
//    default:
//      if(dfltInstance_NONE == null) dfltInstance_NONE = new VladDog(VladDogAccessType.NONE);
//      return dfltInstance_NONE;
//   }
//  }
//   
//  public static VladDog getDfltInstance() {
//    return getDfltInstance(VladDogAccessType.NONE);
//  }
//  
//  //protected StorageDataSet sdsMain = super.getDataSetMain();
//  //protected StorageDataSet sdsNone = super.getSdsNone();
//  //protected Column colName = super.colName();
//  //protected Column colId = super.colId();
//  //protected Column colFriendId = super.colFriendId();
//  //protected Column colDateTimeOfDeath = super.colDateTimeOfDeath();
//  //protected Column colAmountOfLegs = super.colAmountOfLegs();
//  //protected Column colDateOfBirth = super.colDateOfBirth();
//  
//  public VladDog() {
//    //super(VladDogAccessType.ONEREC, true);
//    //super(VladDogAccessType.LIST, true);
//    try {
//        jbInit();
//    } catch (Exception ex) {
//      ex.printStackTrace();
//    }
//  }
//  
//  public VladDog(VladDogAccessType accessType) {
//    try {
//      jbInit();
//    } catch (Exception ex) {
//      ex.printStackTrace();
//    }
//    setAccessType(accessType, false);
//  }
//  
//  public VladDog(VladDogAccessType accessType, StorageDataSet sds) {
//    super(accessType, new StorageDataSet[] {sds});
//    try {
//      jbInit();
//    } catch (Exception ex) {
//      ex.printStackTrace();
//    }
//  }
//  
//  public VladDog(VladDogAccessType accessType, Database db) {
//    construct_db = db;
//    try {
//      jbInit();
//    } catch (Exception ex) {
//      ex.printStackTrace();
//    }
//    setAccessType(accessType, construct_db);
//  }
//  
//  private void lsInit() {
//    //sdsMain.setColumns(sdsMain.getColumns());
//    //sdsNone.setColumns(super.getDesignColumns());
//  }
//  
//  private void jbInit() throws Exception {
//    lsInit();
//  }
//  
//  public boolean accessOneRec_By?(String _, boolean forceRefresh) {
//    return accessOneRec_By?(_, false, forceRefresh);
//  }
//  public boolean accessOneRec_By?(String _, boolean insertRow ,boolean forceRefresh) {
//    if (getAccessType()!=VladDogAccessType._) {
//      if (construct_db!=null) {
//        this.setAccessType(VladDogAccessType._, construct_db);
//      } else {
//        this.setAccessType(VladDogAccessType._, false);
//      }
//    }
//    StorageDataSet sds = getDataSetMain();
//    ReadWriteRow paramRow = sds.getProvider().getParameterRow();
//    if (!paramRow.isNull("_") && paramRow.getString("_").equals(_)) {
//      if (forceRefresh) this.RefreshDataSets();
//    } else {
//      paramRow.setString("_", _);
//      this.RefreshDataSets();
//    }
//    if(sds.rowCount()==0 && insertRow){
//      sds.insertRow(false);
//      return false;
//    }else if(sds.rowCount()>0){
//      return true;
//    }
//    return false;
//  }
//  
//  public boolean moveToRow_By?(String _) {
//    if (this.getAccessType()!=VladDogAccessType._) {
//      throw new DataSetException("can't use moveToRow... with " + this.getAccessType());
//    }
//    String _FldName = col_().getColumnName();
//    StorageDataSet sds = getDataSetMain();
//    if (!sds.isOpen()) sds.open();
//    DataRow _dr = new DataRow(sds, new String[] {_FldName});
//    _dr.setString(_FldName, _);
//    return sds.locate(_dr, Locate.FIRST);
//  }
//  
//  protected boolean allowAccessTypeChange(VladDogAccessType accessType) {
//    if (this == dfltInstance_ONEREC) {
//      if (accessType!=VladDogAccessType.ONEREC) return false;
//    } else if (this == dfltInstance_LIST) {
//      if (accessType!=VladDogAccessType.LIST) return false;
//    } else { 
//      return true;
//    }
//    return true;
//  }
//  
}
